--// Все, что будет использовать структуру SoundData, перед проигрыванием звука нужно будет
		проверять переменные на нулевые значения.
		Возможно, следует вообще создать пару спец.фукнций, которые прямо по названию 
		структуры будут сами все это делать и проигрывать звук.
		

--// Отдельные классы для навесных модулей. В классе оружия функции, которые обращаются к
		модулям, а модули уже сами выполняют нужную операцию. Например, фонарик.
		Спавнится оружие, спавнится новый объект с моделью фонарика. 
		Ссылка на этот оъект фонарика сохраняется в классе оружия.
		Когда человек нажимает кнопку действия с модулем, вызывается функция, 
		которая обращается к модулю через ссылку и модуль производит какое-то действие.
		Т.е., напремер, включается фонарик.
		Тоже самое с прицелами, лцу и тп.
		Это позволит создать модульность оружия с простой и удобной реализацией.
		--[В работе!]--:
		Я написал базовые классы для тактичесского модуля и посадил на них LaserSightModule.
		Базовые классы модулей представляют из себя класс модуля и его Attachment класс для вида
		от 3-го лца.
		В них сейчас я работаю над репликацией.
		Сейчас на сервере происходит изменение переменной bModuleIsActive. 
		Она сразу отсылается клиенту и на нем вызывается клиентская функция вкл./выкл. модуля.
		Что нужно доделать:
			1. Нужно дописать спавн самого модуля на сервере и его привязку (Attach) к оружию;
			2. Нужно создать свои классы точек "Projector" света/лазера и т.п.
				(Projector - это точка, она должна быть единой у всех, а вот сам луч прописать 
					в классы модулей, ибо он там и должен рисоваться до точки);
					[Пока сделал фонарики. Логику тестируем на них.]
			3. Дописать активацию света/лазера на сервере в модуле и Attachment классе
				(эти классы сами передадут данные о себе);
			

--// Доработка баллистики:
	1. Каждый метриал в игре должен иметь определенное значение прочности на 1 UU толщины его слоя;
	2. При соприкосновении с поверхностью пуля должна считаться по нормали (перпендикуляру) к поверхности;
	3. При соприкосновении учитывается коэффициент экспансии материала; [done]
	4. При соприкосновении учитывается масса пули и её кинетичесская энергия; [done]
	5. Все это должно помочь сделать простреливаемость объектов;
	6. При вхождении в объект или стену, в пуле должна меняться bool переменная, которая 
		будет менять поведение event OutOfTheWorld(), дабы пуля не удалялась.

--// Заняться функциями поднятия двуручного оружия в Weapon класссе. Смотреть на примере
		Single и Dualies классов. Все, что касается спавна второй модели и т.п. уже готово,
		осталось лишь поправить, точнее дополнить функции HandlePickupQuery и т.п.,
		дабы подменялись стволы, и т.п.
		[!] Дописал. Нужно создать классы тех же MK23 и проверить.

--// Создать освещающие шашки. Ограничить их количество 5 штуками в инвентаре. 
		Сами шашки - объекты, которые при их выбрасывание загораются и горят в течении 5 минут,
		освещая все вокруг в небольшом радиусе.

--// [!] Нашел способ как программно обрабатывать анимацию перезарядки. Оказывается, можно 
		при помощи функции SetAnimFrame указать с какого кадра проиграть указанную
		анимацию. Т.е. как раз можно будет для AA12, MP5-х и для Mkb42 указать кадры, 
		с которых начинать проигрывание анимации перезарядки, дабы пропустить взведение
		затвора.

--// Когда-то давно я перебалнсировал скорострельность много оружия, но вот о чем я 
		тогда не подумал, так это о том, что нужно исправить и скрость воспроизведения анимации.
		В общем, нужно будет, как будет время, проблежаться по анимациям оружия, просчитать
		длительность одного выстрела и просчитать с какой скоростью её проигрывать, дабы
		она умещалась в задержки между выстрелами при выставленной мною скорострельности оружия.

--// На картах спавнятся стандартные стволы, нужно их заменить на мои. Т.е. подменить Pickup
		классы. Нужно глянуть GameRules, вроде бы там прописываются стволы на спавн.

--// Прописать в базовый Weapon класс универсальные функции переключения режима стрельбы,
		так же отдельную функцию "подстройки" прицела, т.е. регулировка кратности. 
		В идеале кратность нужно регулировать колесиком мыши +/-.
		Так же написать отдельные функции на включение/выключение фонарика и лазерного прицела.
		Лезерный прицел должен уменьшать AimError, нужно подумать и переписать работу с AimError
		таким образом, что бы менялся не default параметр, а ввести 2 дополнительные переменные,
		в которой будет сохранятся оригинальное значение AimError и AimError при активации лазерки.
		А дальше уже AimError приравнивается к одному из этих значений и на него просчитываются бонусы. 
		Так же для AimError прописать бонусы перкам.
		Нужно обязательно вписать в базовый Attachment класс нормальную версию функции 
		UpdateTacBeam, которая обеспечивает спавн и активацию света фонарика и все осатльное, 
		что с ним связано, иначе у дробовиков отвалится эффект фонарика.
		Так же подумать, что можно сделать с лазерным прицелом.
		Временно вписал в класс UM_BaseShotgunAttachment фирменный велосипед от 
		разрабов KF. Заменить своей функцией!

--// Доработать эффекты. Нужно переделать эффекты взрыва разрывных патронов - 
		взять объемный огонь от	взрыва зажигательного снаряда и добавить дым к нему.
		Так же пережелать дульное пламя в этом же духе, но поработать над скоростью его
		движения из дула. Дым ствола переделать таким образом, что бы струя дыма выбрасывлась
		после пламени, а так же еще один дым постепенно накапливался с маленькой 
		скоростью спавна, т.е. эмитировать нагрев ствола.

--// Стазис граната для снайпера с эффектами и принципом работы заморозки у ZEDGun.

--// Возможно, для 3-го лица в Attachment классе для гильз тоже стоит использовать Emitters, а
		не xEmitters.

--// Разнести ActorPool на отдельные пулы. Т.е. на EmitterPool и т.д. Это позволит содать
		действительную многопоточность.
		
--// Доработать Emitters на работу с EmittersPool.

--// Пернести новое оружее, пришедшее с обновой, в мод и прописать бонусы на него в перки.

--// Пробежаться по классам оружия и вытереть все статические записи с текстурами и тп, 
		заменив их Ref переменными для динамичесской подгрузки.

--// Вышла новая версия ServerPerks. Нужно будет пробежаться по исходникам, 
		посмотреть что изменилось, что было доработано и т.д.
		
--// В дальнейшем, нужно будет переписать перезарядку и логику так, что бы можно было перезарежать
		как обойму для 1-го FireMode, так и для 2-го. Т.е. нужно ввести понятие размера обоймы
		для FireMode.

--// Вынести поиск врагов из таймера в гранатах в отдельную функцию сенсора прямо в 
		базовый класс и вызывать уже её из таймера.
		
--// На базовом классе газа содать базовый класс огня и перести на него огонь огнемета.
		Так же перенести на этот базовый класс огонь Naplm снарядов.

--// Перенести Slug пули в дробовиках на мою баллистику.

--// Дать ведьме небольной шанс уничтожать обычные пули тоже. Т.е. прописать TakeDamage в 
		базовый класс пуль.

--// [?] UM_WeaponInfoGenerator не генерирует корректно информацию на клиентах.
		Проблема в том, что нельзя реплицировать информацию из динамических массивов.
		Нужно придумать, как обойти это ограничение. Т.е. создать такой механизм, который,
		например, при подключении игрока будет ему отправлять уже готовые результаты.
		Т.е., например, сделать функцию, которая на клиенте, после тайм-аута в 10 сек,
		начнет запрашивать с сервера информацию и заполнять массив у себя.
		Или придумать что-то более эффективное.
		Пока что отказываемся от гениратора.
		Логиу этого гениратора нужно переносить в класс UM_SRBuyMenuSaleList, т.е. прямо в GUI,
		который отвечает за отрисовку полосок и т.п.

--// Доделать снаряды медика в дробовиках. Создать базовый класс, перенести на него все 
		существующие пули, а так же создать снаряды для всех остальных дробовиков.

--// Для обреза, т.е. для бумпалки, сделать пиросу Dragon's breath, т.е. зажигательную дробь,
		такую же, как и в TrenchGun.
		
--// Прописать пункт Licence в шапки во всех файлах исходников.

--// На будущее: придумать, как релизовать идею с возможностью пауков ползать по стенам и
		потолкам. Подозреваю, что нужно как-то с физикой заморочится.

--// Посмотреть что с уроном у пауков!
		(Возможно, исправил.)
		Есть подозрения, что этот лаг мог возникать из-за путаницы у разработчиков с типами
		переменных, отвечающих за урон. Они использовали Max функцию во float переменной,
		которая округляла с начала до целого числа, а затем опять переводила во float.
		Возможно из-за этого округления и получался зверский урон.

--// На будущее: вписать в базовый класс снарядов возможность задовать дульную скорость в 
		в feet per seconds, т.е. в американских еденицах измерения. 
		А так же продумать возможность переключения с метричесской на 
		имеперские еденицы измерения. При этом, переменные должны быть разные для 
		этих двух систем измерения.

0) Написать новую систему набора мобов для карты. Сейчас все регулируется через списки
	мобов и конфигурацию мобов на волнах, нужно же написать систему, которая сама будет 
	подгружать список с определенными управляющими параметрами и рандомно составлять "план"
	спавна на волны. Это система позволит в дальнейшем создать много разны видов и подвидов 
	мобов, при этом от меня не будет требоваться постоянно исправлять кофигурацию волн.

0) Переписать поджиг мобов. Вписать туда рандомный поджиг мобов трассирующими пулямя, причем,
	регулироваться шанс поджига должен из класса снарядов.
	Рандом не в поджиге, а в самом трассирующем снаряде. Рандомится выбор урона, зажигательный,
	или обычный.

0) Новые дополнительные кластреные мины для подрывника.
	
0)	(!) ВАЖНО!
	Всему бывшему Instant оружию нужно обязательно из Attachment класса
	удалять переменную mTracerClass в секции defaultproperties!

0) Уивидел прикол в Killing Floor SDK. Похоже можно использовать меш и скин от того же Crawler,
	а анимацию цеплять, например, от Clot. Т.е. скин и модель будет от паука, а анимация
	пходки, атаки и тп будет от клота.
	Возможно, в будущем, имеет смысле сделать некий рандомайзером в этом плане.
	Есть, кстати, мутатор ZombieMix, там как раз рандомятся модели и скины.
	
0) Для скорострельного автоматичесского оружия в базовых Fire классах имеет смысл создать 
	отдельную отдачу для первого выстрела, как в Battlefield 3. Ибо при перовм выстреле
	должно уводить ствол больше и отдача должна быть чуть сильнее, а далее, при  последующих
	выстрелах в очереди отдача должна уменьшаться до определенного предела, т.е. человек
	начинает удерживать ствол.

0) Дополнить записи статистики по урону. Нужно записывать отдельно MachineGunDamage для прокачки перка Heavy Gunner.
	Cоздать новый перк - Heavy Gunner - спец по тяжелым пулеметам. Чуть больше 16кг переносимый
	вес, ибо все тяжелые пулеметы будут весить больше 16кг, 10 гранат, ни хп, ни невидимок не видит. 
	До 50% сопротивления урону крика ведьмы. На низком lvl передвигается на 15-25% медленнее остальных, но
	с ростом lvl бегает так же, как и остальные, а на высоких даже чуть быстрее, в пределах 10%.

0) Перенести оставшееся оружее из новых мутаторов: Cz75Laser, KFWeaponP90, XMk5Wep, 
	LilithKissWep, SW76Wep, WhiskyChainsword
	
0) Перенести код, скины, модели и тп оставшегося оружия из 
	папки D:\Downloads\Killing Floor Mutators\To unpack
	теперь, учитывая новые стволы, вроде рпк, sa80, m249 и тд наберается оружее для перка
	Heavy Gunner.

0) Есть такой известный баг Killing Floor - текстура рук у некоторых пушек отображается не та,
	что у скина вашего песонажа. Это происходит потому, что в массив Skins во многом оружии 
	тупо вписана стандартная текстура рук, например: 
		SkinRefs(3)="KF_Weapons2_Trip_T.hands.BritishPara_Hands_1st_P"
	Как раз пдобные стандартные текстуры и подменяют собой руки скина персонажа. 
	Стоит заняться выпиливанием подобной фигни из оружия.
	Проверил на Thompson G2 Contender, оказался прав. Игра сама подставляет текстуры рук от
	скина, выбранного игроком, если эти текстуры рук не были указаны в 
	массиве Skins(он же SkinsRef массив для динамичесской подгрузки).

0) После взрыва Napalm Projectil нужно спавнить огонь на поверхностях в зоне поражения,
	дабы он еще горел какое-то время (3-4 секунд) и наносил урон всем врагам, 
	которые окажутся в зоне горения.
	
0) Внести в базовые классы оружия проверки в функцию DoTogle на !IsFiring и !IsReloading.

1) Вынести все корректировки оружия из функции PostBeginPlay() класса мутатора, в свои
	номрмальные отдельные классы. Таким образом избавится от глюков 
	с модиффикацией исходных классов.

2) возможноcть скидывать коробочку патронов того оружия, которое человек держит в руках;

3) продумать и написать систему автоматической генерации скидок и бонусов перкам по 
	какой-нибдуь специальной переменной в Pickup классе
	!Это решается созданием базовых абстрактных классов. Все что нужно будет - просто проверить, 
	к какому классу относится то или иное оружие;

7) Толстяк, блюющий зажигательной смесью.

9) Идея по поводу смерти игрока в раунде. Дать возможность игрокам качать 
	(в прокачке из 10го пункта)	шанс не смерти, а падения, в так называемый, накаут,
	наподобие L4D. Только с той разницей, что тут будет именно шанс не умереть сразу,
	а упасть в этот накаут, и этот шанс, т.е. вероятность, падения в накаут можно будет 
	увеличить прокачкой, например до макс 75% случаев.
	В накаут игрок падает, когда его Health <= 1. Далее Health полоска переводится во 
	float формат и показывается, как потихоньку убегают жизни в сотых - скрость уменьшения 
	тоже можно замедлить, прокачав это в перке. 
	В это время, игрок лежит на земеле.	Он получает всего лишь 1% от обычного урона от врагов.
	Он может двигаться, но очень медленно. У него слегка затемнен экран (эмитация обмарачного 
	состояния) и скорость прицеливание, т.е. чувствительность мыши снижается на 50%.
	Что бы подняться, игроку нужно поднять полоску Health >= 1. При этом один укол шприца
	будет вылечивать не сразу нексолько Health, а лишь несколько десятых. Это будет отлично
	регулировать нынешней системой - чем больше игровоков, тем меньше Health игроке сам себе
	вылечивает.	При падении у игрока сразу Helath будет около 0,8, дабы он не мог 
	сразу же сам себя поднять.
	Далее развитие событий такое. Сам игрок может себя подлечивать, но скорости перезарядки
	шприца у не хватит что бы себя поднять, себя поднять сможет только медик.
	Остальным же нужна будет помощь, т.е. несколько уколов, дабы его полоска Health >= 1.
	Если же игрока вылечить не успели, то он умирает.
	Реализовывается это все через Pawn класс игрока. 
	При падении он переходит в State 'KnockDown' и там уже все это регулируется. 
	Дублируется функция TakeDamage, изменяется количество Health, при вылечивании и т.д.

10) По поводу прокачки. Как уже ранее записывал, имеет смысл сделать прокачку 
	для каждых бонусов отдельно, как в Borderlands. При этом очки, которые можно будет тратить
	на прокачку, будут зарабатываться отдельно от уровня (level) игрока.
	Очки в игре будут представлять из себя некие условные единицы, которые игрок зарабатывает,
	выполняя различные достижения, например, убить 100 невидимок, или 1000 клотов и т.д.
	Прокачка умений, скилов, бонусов, так же, как и в Borderladns будет представлять из себя
	древо, т.е. иерархию, но ветвей у древа будет куда больше и поделены эти ветви будут по
	виду бонусов. Т.е., например, у подрывника древо, где качаются гранаты, их кол-во, урон,
	рандиус поражения. Потом древо, где качается запас патронов к разным классам оружия,
	а так же тип патронов (разрывные патроны и тп).
	Далее, бонус, вроде увеличенной обоймы и тп, для каждого класса, будут отдельные 
	для каждого оружия. Т.е. увеличеная обойма для АК47, отдельно увеличенная обойма для FN FAL
	и т.п., наподобие Battlefield 3. Т.е. то, что относится непосредственно к умениям, будь то
	точность стрельбы, запас патронов, будет качаться в перке игрока, а все, 
	что касается улучшения характеристик непосредственно самого оуржия, 
	качаться будет для каждого ствола отдельно.
	У каждого элемента прокачки в древе или у прокачки оружия будет своя цена в этих
	условных единицах. Цена будет снижаться в зависимости от Level игрока.
	Т.е. те игроки, которые уже долго играют и у которых много выигранных баталий,
	могут меньше тратить игровых у.е. на прокачку тех или иных навыков.
	Сами игровые у.е. можно будет как заработать, так и купить у нас на сайте. При этом, 
	продажа этих у.е. будет неявная. На странице игрока, т.е.
	на странице его профиля, будет раздел Donate/Пожертвование,
	и там будут кнопки, вроде пожертвовать 1$, 2$, 5$, 10$. А ниже будет приписано, 
	мол за это, например, за 1$ мы вам подарим 1000 игровых у.е. в знак благодарности за 
	ваше пожертвование. При нажатии кнопки, будет отсылаться id пользователя, с чьей страницы 
	была нажата кнопка, а при прохождении оплаты, будет по пришедшей информации с суммой и id
	начисляться на этот id эквивалент.
	Так же в разделе пожертвований будет написано, что наш проект не коммерчесский
	и все деньги с пожертвований мы пускаем на развитие и поддержание проекта.
	Потом нужно будет дописать, что бы игрок заходил не в лобби, а в некую личную комнату. 
	Что-то вроде зрителей. И он там мог ковыряться, качать, разбираться, 
	а если хочет играть, нажимет кнопку "Вступить в игру" и входит в лобби, если игра еще не 
	идет и ожидает других игроков. Или если он один, то как сейчас, просто жемет в лобби кнопку
	Ready и вступает в игру.
	Это позволит отделить тех, кто хочет прокачать что-то, от тех, кто зашел поиграть.

10.1) Реализация прокачки. Статистичесские данные следует хранить на стороне сервера. 
	У юзера, возможно, будет храниться лишь локальная копия, дабы не нагружать сервер
	постоянными обращениями к нему от разных пользователей по поводу бонусов разброса и т.п.
	Локальная статистка должна быть как-то залочена от перезаписи юзером. Она может быть 
	перезаписана только вызовом с сервера. Так же постоянно рандомно будет выбираться 
	определенный промежуток времени, через который сервер будет сверять локальную статику
	юзера со своей. Если у юзера значения отличаются в большую сторону, т.е. он читит,
	то сервер будет выводить этому юзеру предупреждение, а статистику приравнивать к совей.
	3 предупреждения = бан на 1 ден. 5 предупреждений, бан на 1 нед. Больше 5 = бан навсегда, 
	разбанивание платное. =)
	Логика сохранения статистики будет такая: происходит какое-то событие, например, убийство
	клота; это событие вызывает серверную функцию обновление статистики; вызовом обновляется
	статистическая переменная на сервере; когда переменная на сервере обновлена сервер отсылает 
	обновление этой переменной юзеру в локальную статистику.
	Бонусы по прокачке самого оружия, вроде увеличенной обоймы и тп, возможно, следует 
	в статистике хранить в виде структуры. Назвнием структуры будет названием самого ствола, 
	а внутри будут хранится бонусы и данные по стволу: бонусы по прокачке ствола, 
	нанесенный им урон, количество убитых, количество выстрелов, поподаний и т.д.
